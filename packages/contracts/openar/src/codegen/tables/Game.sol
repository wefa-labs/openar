// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Game")));
bytes32 constant GameTableId = _tableId;

struct GameData {
  uint8 matchesPlayed;
  uint32 spaceY;
  bytes32 spaceId;
  address winner;
  address[] players;
}

library Game {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.BYTES32;
    _schema[3] = SchemaType.ADDRESS;
    _schema[4] = SchemaType.ADDRESS_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "matchesPlayed";
    _fieldNames[1] = "spaceY";
    _fieldNames[2] = "spaceId";
    _fieldNames[3] = "winner";
    _fieldNames[4] = "players";
    return ("Game", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get matchesPlayed */
  function getMatchesPlayed(bytes32 gameId) internal view returns (uint8 matchesPlayed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get matchesPlayed (using the specified store) */
  function getMatchesPlayed(IStore _store, bytes32 gameId) internal view returns (uint8 matchesPlayed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set matchesPlayed */
  function setMatchesPlayed(bytes32 gameId, uint8 matchesPlayed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((matchesPlayed)));
  }

  /** Set matchesPlayed (using the specified store) */
  function setMatchesPlayed(IStore _store, bytes32 gameId, uint8 matchesPlayed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((matchesPlayed)));
  }

  /** Get spaceY */
  function getSpaceY(bytes32 gameId) internal view returns (uint32 spaceY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get spaceY (using the specified store) */
  function getSpaceY(IStore _store, bytes32 gameId) internal view returns (uint32 spaceY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set spaceY */
  function setSpaceY(bytes32 gameId, uint32 spaceY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((spaceY)));
  }

  /** Set spaceY (using the specified store) */
  function setSpaceY(IStore _store, bytes32 gameId, uint32 spaceY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((spaceY)));
  }

  /** Get spaceId */
  function getSpaceId(bytes32 gameId) internal view returns (bytes32 spaceId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get spaceId (using the specified store) */
  function getSpaceId(IStore _store, bytes32 gameId) internal view returns (bytes32 spaceId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set spaceId */
  function setSpaceId(bytes32 gameId, bytes32 spaceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((spaceId)));
  }

  /** Set spaceId (using the specified store) */
  function setSpaceId(IStore _store, bytes32 gameId, bytes32 spaceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((spaceId)));
  }

  /** Get winner */
  function getWinner(bytes32 gameId) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get winner (using the specified store) */
  function getWinner(IStore _store, bytes32 gameId) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set winner */
  function setWinner(bytes32 gameId, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((winner)));
  }

  /** Set winner (using the specified store) */
  function setWinner(IStore _store, bytes32 gameId, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((winner)));
  }

  /** Get players */
  function getPlayers(bytes32 gameId) internal view returns (address[] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /** Get players (using the specified store) */
  function getPlayers(IStore _store, bytes32 gameId) internal view returns (address[] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /** Set players */
  function setPlayers(bytes32 gameId, address[] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 4, EncodeArray.encode((players)));
  }

  /** Set players (using the specified store) */
  function setPlayers(IStore _store, bytes32 gameId, address[] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 4, EncodeArray.encode((players)));
  }

  /** Get the length of players */
  function lengthPlayers(bytes32 gameId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 20;
  }

  /** Get the length of players (using the specified store) */
  function lengthPlayers(IStore _store, bytes32 gameId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 20;
  }

  /** Get an item of players (unchecked, returns invalid data if index overflows) */
  function getItemPlayers(bytes32 gameId, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 20, (_index + 1) * 20);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get an item of players (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemPlayers(IStore _store, bytes32 gameId, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 20, (_index + 1) * 20);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Push an element to players */
  function pushPlayers(bytes32 gameId, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Push an element to players (using the specified store) */
  function pushPlayers(IStore _store, bytes32 gameId, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Pop an element from players */
  function popPlayers(bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 20);
  }

  /** Pop an element from players (using the specified store) */
  function popPlayers(IStore _store, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.popFromField(_tableId, _keyTuple, 4, 20);
  }

  /** Update an element of players at `_index` */
  function updatePlayers(bytes32 gameId, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 20, abi.encodePacked((_element)));
  }

  /** Update an element of players (using the specified store) at `_index` */
  function updatePlayers(IStore _store, bytes32 gameId, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.updateInField(_tableId, _keyTuple, 4, _index * 20, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 gameId) internal view returns (GameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 gameId) internal view returns (GameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 gameId,
    uint8 matchesPlayed,
    uint32 spaceY,
    bytes32 spaceId,
    address winner,
    address[] memory players
  ) internal {
    bytes memory _data = encode(matchesPlayed, spaceY, spaceId, winner, players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 gameId,
    uint8 matchesPlayed,
    uint32 spaceY,
    bytes32 spaceId,
    address winner,
    address[] memory players
  ) internal {
    bytes memory _data = encode(matchesPlayed, spaceY, spaceId, winner, players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 gameId, GameData memory _table) internal {
    set(gameId, _table.matchesPlayed, _table.spaceY, _table.spaceId, _table.winner, _table.players);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 gameId, GameData memory _table) internal {
    set(_store, gameId, _table.matchesPlayed, _table.spaceY, _table.spaceId, _table.winner, _table.players);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (GameData memory _table) {
    // 57 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 57));

    _table.matchesPlayed = (uint8(Bytes.slice1(_blob, 0)));

    _table.spaceY = (uint32(Bytes.slice4(_blob, 1)));

    _table.spaceId = (Bytes.slice32(_blob, 5));

    _table.winner = (address(Bytes.slice20(_blob, 37)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 57) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 89;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.players = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint8 matchesPlayed,
    uint32 spaceY,
    bytes32 spaceId,
    address winner,
    address[] memory players
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(players.length * 20);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(matchesPlayed, spaceY, spaceId, winner, _encodedLengths.unwrap(), EncodeArray.encode((players)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 gameId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
