// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("openar"), bytes16("Cell")));
bytes32 constant CellTableId = _tableId;

struct CellData {
  uint32 x;
  uint32 y;
  bytes32[] values;
}

library Cell {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "x";
    _fieldNames[1] = "y";
    _fieldNames[2] = "values";
    return ("Cell", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get x */
  function getX(bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (uint32 x) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (uint32 x) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set x */
  function setX(bytes32 worldId, bytes32 spaceId, uint32 position, uint32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position, uint32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Get y */
  function getY(bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (uint32 y) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (uint32 y) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set y */
  function setY(bytes32 worldId, bytes32 spaceId, uint32 position, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Get values */
  function getValues(
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position
  ) internal view returns (bytes32[] memory values) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get values (using the specified store) */
  function getValues(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position
  ) internal view returns (bytes32[] memory values) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set values */
  function setValues(bytes32 worldId, bytes32 spaceId, uint32 position, bytes32[] memory values) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, EncodeArray.encode((values)));
  }

  /** Set values (using the specified store) */
  function setValues(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    bytes32[] memory values
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.setField(_tableId, _keyTuple, 2, EncodeArray.encode((values)));
  }

  /** Get the length of values */
  function lengthValues(bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of values (using the specified store) */
  function lengthValues(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of values (unchecked, returns invalid data if index overflows) */
  function getItemValues(
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get an item of values (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemValues(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Push an element to values */
  function pushValues(bytes32 worldId, bytes32 spaceId, uint32 position, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /** Push an element to values (using the specified store) */
  function pushValues(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /** Pop an element from values */
  function popValues(bytes32 worldId, bytes32 spaceId, uint32 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 32);
  }

  /** Pop an element from values (using the specified store) */
  function popValues(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.popFromField(_tableId, _keyTuple, 2, 32);
  }

  /** Update an element of values at `_index` */
  function updateValues(bytes32 worldId, bytes32 spaceId, uint32 position, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of values (using the specified store) at `_index` */
  function updateValues(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 worldId, bytes32 spaceId, uint32 position) internal view returns (CellData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position
  ) internal view returns (CellData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    uint32 x,
    uint32 y,
    bytes32[] memory values
  ) internal {
    bytes memory _data = encode(x, y, values);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position,
    uint32 x,
    uint32 y,
    bytes32[] memory values
  ) internal {
    bytes memory _data = encode(x, y, values);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 worldId, bytes32 spaceId, uint32 position, CellData memory _table) internal {
    set(worldId, spaceId, position, _table.x, _table.y, _table.values);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position, CellData memory _table) internal {
    set(_store, worldId, spaceId, position, _table.x, _table.y, _table.values);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (CellData memory _table) {
    // 8 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 8));

    _table.x = (uint32(Bytes.slice4(_blob, 0)));

    _table.y = (uint32(Bytes.slice4(_blob, 4)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 8) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 40;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.values = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint32 x, uint32 y, bytes32[] memory values) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(values.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(x, y, _encodedLengths.unwrap(), EncodeArray.encode((values)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(
    bytes32 worldId,
    bytes32 spaceId,
    uint32 position
  ) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 worldId, bytes32 spaceId, uint32 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 worldId, bytes32 spaceId, uint32 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32((worldId));
    _keyTuple[1] = bytes32((spaceId));
    _keyTuple[2] = bytes32(uint256((position)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
